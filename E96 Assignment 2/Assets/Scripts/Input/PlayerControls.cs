//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Basic Gameplay"",
            ""id"": ""688e3f68-74f1-4c44-9c0a-ae00a405a4e4"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Value"",
                    ""id"": ""c627e4d3-8164-429d-8127-c5687a146e24"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pancaking"",
                    ""type"": ""Value"",
                    ""id"": ""8bc74c60-5fda-4358-b3af-c6a4d506309f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0a50b63f-265e-430d-945a-96d6a7ddefcc"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a2b744fc-b7fc-4a8b-9d2d-bfab6b14c1db"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pancaking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Basic Gameplay
        m_BasicGameplay = asset.FindActionMap("Basic Gameplay", throwIfNotFound: true);
        m_BasicGameplay_Jump = m_BasicGameplay.FindAction("Jump", throwIfNotFound: true);
        m_BasicGameplay_Pancaking = m_BasicGameplay.FindAction("Pancaking", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Basic Gameplay
    private readonly InputActionMap m_BasicGameplay;
    private List<IBasicGameplayActions> m_BasicGameplayActionsCallbackInterfaces = new List<IBasicGameplayActions>();
    private readonly InputAction m_BasicGameplay_Jump;
    private readonly InputAction m_BasicGameplay_Pancaking;
    public struct BasicGameplayActions
    {
        private @PlayerControls m_Wrapper;
        public BasicGameplayActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_BasicGameplay_Jump;
        public InputAction @Pancaking => m_Wrapper.m_BasicGameplay_Pancaking;
        public InputActionMap Get() { return m_Wrapper.m_BasicGameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BasicGameplayActions set) { return set.Get(); }
        public void AddCallbacks(IBasicGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_BasicGameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BasicGameplayActionsCallbackInterfaces.Add(instance);
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Pancaking.started += instance.OnPancaking;
            @Pancaking.performed += instance.OnPancaking;
            @Pancaking.canceled += instance.OnPancaking;
        }

        private void UnregisterCallbacks(IBasicGameplayActions instance)
        {
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Pancaking.started -= instance.OnPancaking;
            @Pancaking.performed -= instance.OnPancaking;
            @Pancaking.canceled -= instance.OnPancaking;
        }

        public void RemoveCallbacks(IBasicGameplayActions instance)
        {
            if (m_Wrapper.m_BasicGameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBasicGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_BasicGameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BasicGameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BasicGameplayActions @BasicGameplay => new BasicGameplayActions(this);
    public interface IBasicGameplayActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnPancaking(InputAction.CallbackContext context);
    }
}
